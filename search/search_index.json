{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Canvas2DMX","text":"<p>Canvas2DMX is a Processing library that maps pixels from your sketch to DMX fixtures in real time. Define LED mappings (strips, grids, rings, corners), apply color correction, and send output to any DMX backend using a simple callback.</p> <p></p> <p>Inspired by FadeCandy and Open Pixel Control by Micah Elizabeth Scott.</p>"},{"location":"index.html#features","title":"\u2728 Features","text":"<ul> <li>Real-time color sampling from the Processing canvas  </li> <li>Flexible LED mapping: strips, rings, grids, single points, square corners  </li> <li>Custom DMX channel patterns (e.g. <code>\"rgb\"</code>, <code>\"drgb\"</code>, <code>\"drgbsc\"</code>)  </li> <li>Default channel values for dimmer, strobe, color wheel, etc.  </li> <li>Gamma / temperature correction and custom response curves  </li> <li>Built-in visualization: color swatches + LED location markers  </li> <li>DMX-agnostic API: works with DMX4Artists, ENTTEC, SP201E, or your own sender  </li> <li>Examples included: Basics, StripMapping, InteractiveDemo </li> </ul>"},{"location":"index.html#quick-start-example","title":"\ud83d\ude80 Quick Start Example","text":"<p>```java import com.studiojordanshaw.canvas2dmx.; import com.jaysonh.dmx4artists.;</p> <p>Canvas2DMX c2d; DMXControl dmx;</p> <p>void setup() {   size(400, 200);   pixelDensity(1);</p> <p>c2d = new Canvas2DMX(this);   c2d.mapLedStrip(0, 8, width/2f, height/2f, 40, 0, false);</p> <p>c2d.setChannelPattern(\"drgb\");   c2d.setDefaultValue('d', 255);   c2d.setStartAt(1);</p> <p>try {     dmx = new DMXControl(0, 512);   } catch (Exception e) {     dmx = null;   } }</p> <p>void draw() {   background(0);   ellipse(mouseX, mouseY, 100, 100);</p> <p>int[] colors = c2d.getLedColors();   c2d.visualize(colors);   c2d.showLedLocations();</p> <p>if (dmx != null) {     c2d.sendToDmx((ch, val) -&gt; dmx.sendValue(ch, val));   } } ````</p>"},{"location":"index.html#learn-more","title":"\ud83d\udcda Learn More","text":"<ul> <li>Getting Started \u2014 installation and first sketch</li> <li>Troubleshooting \u2014 common issues and fixes</li> <li>Develop \u2014 contributing and building from source</li> <li>Release \u2014 packaging and Contribution Manager</li> </ul>"},{"location":"index.html#demo-video","title":"\ud83c\udfa5 Demo Video","text":""},{"location":"develop.html","title":"Develop","text":""},{"location":"develop.html#dmx-backend-integration-adapterproxy-design","title":"DMX Backend Integration (Adapter/Proxy Design)","text":"<p>Canvas2DMX is backend-agnostic. It doesn\u2019t depend on any specific DMX library (ENTTEC, DMX4Artists, Art-Net, sACN, OLA, etc.). Instead, it exposes a tiny callback so you can adapt any sender with one line.</p>"},{"location":"develop.html#minimal-contract","title":"Minimal contract","text":"<pre><code>@FunctionalInterface\npublic interface DmxSender {\n  void send(int channel, int value);\n}\n</code></pre> <p>Canvas2DMX emits channel/value pairs using your current mapping + channel pattern:</p> <pre><code>c2d.sendToDmx((ch, val) -&gt; {\n  // bridge to your backend here\n  dmxController.sendValue(ch, val);\n});\n</code></pre> <ul> <li> <p>Why this approach?</p> </li> <li> <p>No hard dependency on a specific DMX stack</p> </li> <li>Plug-and-play with any backend (USB DMX, Art-Net, sACN)</li> <li>Testable: swap in a mock sender for unit/integration tests</li> </ul>"},{"location":"develop.html#two-integration-modes","title":"Two integration modes","text":"<ol> <li>Streaming (per channel/value) \u2014 lowest friction, works with libraries like DMX4Artists:</li> </ol> <pre><code>c2d.sendToDmx((ch, val) -&gt; dmx.sendValue(ch, val));\n</code></pre> <ol> <li>Batch frame \u2014 if your backend prefers a full universe write:</li> </ol> <pre><code>int[] frame = c2d.buildDmxFrame(512);     // 1-based DMX mapped into 0-based array\nartnet.writeUniverse(0, frame);           // hypothetical bulk API\n</code></pre>"},{"location":"develop.html#examples","title":"Examples","text":"<p>DMX4Artists (ENTTEC / serial)</p> <pre><code>import com.jaysonh.dmx4artists.*;\n\nDMXControl dmx = new DMXControl(0, 512);\nc2d.sendToDmx((ch, val) -&gt; dmx.sendValue(ch, val));\n</code></pre> <p>Mock sender (testing / no hardware)</p> <pre><code>c2d.sendToDmx((ch, val) -&gt; {\n  if (ch &lt;= 16 &amp;&amp; frameCount % 30 == 0) println(\"ch \" + ch + \" = \" + val);\n});\n</code></pre> <p>Art-Net / sACN style (batch)</p> <pre><code>int[] frame = c2d.buildDmxFrame(512);\n// e.g., convert to byte[] and send in one call (pseudo-code)\n// byte[] bytes = new byte[frame.length];\n// for (int i = 0; i &lt; frame.length; i++) bytes[i] = (byte) (frame[i] &amp; 0xFF);\n// artnet.writeUniverse(0, bytes);\n</code></pre>"},{"location":"develop.html#design-note-why-not-biconsumerintegerinteger","title":"Design note: why not <code>BiConsumer&lt;Integer,Integer&gt;</code>?","text":"<p>We considered an overload that accepted <code>BiConsumer&lt;Integer,Integer&gt;</code>. However, having both <code>sendToDmx(DmxSender)</code> and <code>sendToDmx(BiConsumer&lt;\u2026&gt;)</code> made lambdas ambiguous for the Java compiler. To keep the API simple and reliable, we kept only the <code>DmxSender</code> version. You still get one-line lambda calls, and the library stays backend-agnostic.</p>"},{"location":"getting-started.html","title":"\ud83d\ude80 Getting Started with Canvas2DMX","text":"<p>Canvas2DMX lets you map pixels from your Processing sketch directly to DMX fixtures in real-time. This quickstart will guide you through installation and your first test sketch.</p>"},{"location":"getting-started.html#1-requirements","title":"1. Requirements","text":"<ul> <li>Processing 4.x</li> <li>DMX4Artists library by Jayson-H </li> <li>Compatible DMX controller (ENTTEC USB Pro, SP201E, etc.)</li> <li>macOS / Windows / Linux with USB DMX adapter</li> </ul>"},{"location":"getting-started.html#2-installation","title":"2. Installation","text":"<ol> <li>Install the DMX4Artists library in Processing:</li> <li>Open Processing \u2192 <code>Sketch</code> \u2192 <code>Import Library</code> \u2192 <code>Add Library\u2026</code></li> <li> <p>Search for DMX4Artists and install.</p> </li> <li> <p>Download or clone the Canvas2DMX library:    <pre><code>git clone https://github.com/jshaw/Canvas2DMX.git\n</code></pre></p> </li> <li> <p>Copy the built library folder into your Processing libraries directory:</p> </li> </ol> <pre><code>Documents/Processing/libraries/\n</code></pre> <ol> <li>Restart Processing.    You should now see Canvas2DMX listed under <code>Sketch \u2192 Import Library</code>.</li> </ol>"},{"location":"getting-started.html#3-your-first-sketch","title":"3. Your First Sketch","text":"<p>Create a new Processing sketch and paste the following code:</p> <pre><code>import com.studiojordanshaw.canvas2dmx.*;\nimport com.jaysonh.dmx4artists.*;\n\nCanvas2DMX c2d;\nDMXControl dmxController;\n\nvoid settings() {\n  size(200, 200);\n  pixelDensity(1);\n}\n\nvoid setup() {\n  c2d = new Canvas2DMX(this);\n  // Map one LED at the center\n  c2d.setLed(0, width/2, height/2);\n}\n\nvoid draw() {\n  // Animate background color\n  background(frameCount % 255, 100, 200);\n\n  // Get LED colors (samples canvas)\n  int[] colors = c2d.getLedColors();\n\n  // Visualize in a small swatch\n  c2d.visualize(colors);\n\n  // Show LED marker\n  c2d.showLedLocations();\n\n  // Send to DMX only if controller is connected\n  if (dmxController != null) {\n    c2d.sendToDmx((ch, val) -&gt; dmxController.sendValue(ch, val));\n  }\n}\n</code></pre> <p>Run the sketch \u2014 you\u2019ll see LED markers drawn over your canvas, with sampled colors shown in a visualization strip at the bottom.</p>"},{"location":"getting-started.html#4-next-steps","title":"4. Next Steps","text":"<ul> <li> <p>Try the examples included with the library:</p> </li> <li> <p><code>Basics</code> \u2014 minimal LED mapping demo</p> </li> <li><code>StripMapping</code> \u2014 mapping a line of LEDs</li> <li> <p><code>InteractiveDemo</code> \u2014 drag shapes and see DMX output in real-time</p> </li> <li> <p>Check out:</p> </li> <li> <p>Advanced Features (gamma correction, channel patterns)</p> </li> <li>Troubleshooting if your DMX isn\u2019t working</li> </ul> <p>\u2705 That\u2019s it! You\u2019re ready to build interactive Processing sketches that control DMX lighting in real time.</p>"},{"location":"release.html","title":"Release","text":"<p>How to cut a Canvas2DMX release, package it for Processing, publish it, and update the docs.</p>"},{"location":"release.html#1-bump-versions","title":"1) Bump versions","text":"<ul> <li> <p><code>build.gradle.kts</code> <code>kotlin   version = \"0.0.2\"</code></p> </li> <li> <p><code>library.properties</code></p> </li> </ul> <pre><code>version=0.0.2\nprettyVersion=0.0.2\n</code></pre> <p>(Optionally refresh <code>sentence</code>, <code>paragraph</code>, and <code>url</code> in <code>library.properties</code>.)</p>"},{"location":"release.html#2-build-package","title":"2) Build &amp; package","text":"<p>From repo root:</p> <pre><code>./gradlew clean buildReleaseArtifacts packageRelease\n</code></pre> <p>Quick local install for testing:</p> <pre><code>./gradlew deployToProcessingSketchbook\n</code></pre>"},{"location":"release.html#3-smoke-test","title":"3) Smoke test","text":"<ol> <li>Restart Processing.</li> <li>Run Basics, StripMapping, InteractiveDemo from    File \u2192 Examples \u2192 Contributed Libraries \u2192 Canvas2DMX.</li> <li>With hardware: confirm DMX output. Without hardware: confirm console preview.</li> </ol>"},{"location":"release.html#4-publish-on-github","title":"4) Publish on GitHub","text":"<pre><code>git tag v0.0.2\ngit push origin v0.0.2\n</code></pre> <ul> <li>Create a GitHub Release for <code>v0.0.2</code>.</li> <li>Attach the built zip (the one that contains <code>library/</code>, <code>examples/</code>, <code>library.properties</code>).</li> </ul>"},{"location":"release.html#5-optional-processing-contribution-manager","title":"5) Optional: Processing Contribution Manager","text":"<p>Ensure <code>library.properties</code> is complete (e.g., <code>name=canvas2dmx</code>, <code>categories=Hardware,I/O</code>, <code>authors=...</code>, <code>url=...</code>). Follow the Processing submission steps to have the zip listed in the Contribution Manager.</p>"},{"location":"release.html#6-update-the-docs-github-pages","title":"6) Update the docs (GitHub Pages)","text":"<p>Your site is served from <code>/docs</code>.</p> <ul> <li>Edit docs under <code>docs/</code> (Markdown + images in <code>docs/img/</code>).</li> <li>Commit &amp; push to <code>main</code> \u2014 Pages updates automatically.</li> </ul> <p>First-time only (repo \u2192 Settings \u2192 Pages): set Source = <code>Deploy from a branch</code>, Branch = <code>main</code>, Folder = <code>/docs</code>.</p> <p>Embedding media</p> <ul> <li>Image: <code>![Canvas2DMX demo](img/hero.png)</code></li> <li>YouTube:</li> </ul> <pre><code>&lt;iframe width=\"560\" height=\"315\"\n  src=\"https://www.youtube.com/embed/VIDEO_ID\"\n  title=\"Canvas2DMX demo\" frameborder=\"0\" allowfullscreen&gt;&lt;/iframe&gt;\n</code></pre>"},{"location":"release.html#7-post-release-checklist","title":"7) Post-release checklist","text":"<ul> <li>[ ] README updated (version, links)</li> <li>[ ] Docs updated (if API changed)</li> <li>[ ] Examples launch cleanly in Processing</li> <li>[ ] GitHub Release has the zip attached</li> <li>[ ] Submitted to Contribution Manager</li> </ul>"},{"location":"troubleshooting.html","title":"Troubleshooting","text":"<p>Quick fixes for common issues when using Canvas2DMX with Processing.</p>"},{"location":"troubleshooting.html#colors-look-wrong-always-white","title":"\ud83d\udda5\ufe0f Colors look wrong / always white","text":"<p>Likely: HiDPI scaling or sampling the wrong pixels.</p> <p>Fix 1. Force 1\u00d7 pixel scale:    <pre><code>void settings() { size(400, 300); pixelDensity(1); }\n</code></pre></p> <ol> <li>Confirm mapping on-screen:</li> </ol> <p><pre><code>c2d.setShowLocations(true);\nc2d.showLedLocations();\n</code></pre> 3. Make sure you mapped an LED:</p> <p><pre><code>c2d.setLed(0, width/2, height/2);\n</code></pre> 4. Sample after drawing:</p> <pre><code>// draw scene...\nint[] colors = c2d.getLedColors();\nc2d.visualize(colors);\nc2d.showLedLocations();\n</code></pre>"},{"location":"troubleshooting.html#dmx-not-connecting-no-light-output","title":"\ud83d\udd0c DMX not connecting (no light output)","text":"<p>Likely: Wrong device selection, drivers, or permissions.</p> <p>Fix</p> <ol> <li>Try alternate initializers (DMX4Artists):</li> </ol> <p><pre><code>dmx = new DMXControl(0, 512);                          // first device\ndmx = new DMXControl(\"SERIAL_NUMBER\", 512);            // by serial\ndmx = new DMXControl(\"/dev/tty.usbserial-XXXX\", 512);  // explicit path\n</code></pre> 2. Verify you\u2019re sending:</p> <p><pre><code>if (dmx != null) c2d.sendToDmx((ch, val) -&gt; dmx.sendValue(ch, val));\n</code></pre> 3. OS tips:</p> <ul> <li>macOS: System Settings \u2192 Privacy &amp; Security (allow serial).</li> <li>Windows: Install FTDI/ENTTEC drivers, check COM port.</li> <li>Linux: Add user to <code>dialout</code>/<code>uucp</code>, check <code>/dev/ttyUSB*</code> perms.</li> <li>Prove data is generated:</li> </ul> <pre><code>int[] frame = c2d.buildDmxFrame(32);\nprintln(java.util.Arrays.toString(frame));\n</code></pre>"},{"location":"troubleshooting.html#library-not-showing-in-processing","title":"\ud83d\udcc1 Library not showing in Processing","text":"<p>Likely: Wrong install path.</p> <p>Fix</p> <ol> <li>Check Processing Sketchbook Location (Preferences).</li> <li>Ensure the folder exists:</li> </ol> <p><pre><code>&lt;Sketchbook&gt;/libraries/canvas2dmx/\n</code></pre> 3. Reinstall &amp; restart Processing:</p> <pre><code>./gradlew deployToProcessingSketchbook\n</code></pre> <p>Or set a custom path in <code>gradle.properties</code>:</p> <pre><code>sketchbook.dir=/Users/you/Documents/Processing4\n</code></pre>"},{"location":"troubleshooting.html#fixture-colors-wrong-eg-redgreen-swapped","title":"\ud83c\udf9b\ufe0f Fixture colors wrong (e.g., red/green swapped)","text":"<p>Likely: Channel pattern mismatch or dimmer not set.</p> <p>Fix</p> <pre><code>c2d.setChannelPattern(\"rgb\");        // or \"drgb\", \"drgbsc\", etc.\nc2d.setDefaultValue('d', 255);       // full brightness if using dimmer 'd'\nc2d.setDefaultValue('s', 0);         // strobe off\nc2d.setStartAt(1);                   // DMX is 1-based\n</code></pre> <p>Match your fixture\u2019s manual.</p>"},{"location":"troubleshooting.html#markers-off-some-leds-stay-black","title":"\ud83d\uddfa\ufe0f Markers off / some LEDs stay black","text":"<p>Likely: Off-canvas mapping or out-of-bounds sample.</p> <p>Fix</p> <pre><code>int n = c2d.getMappedLedCount();\nfor (int i = 0; i &lt; n; i++) {\n  int pos = c2d.getLedPixelLocation(i); // -1 = unmapped\n  if (pos &gt;= 0) println(\"LED \" + i + \" \u2192 pixel \" + pos);\n}\n</code></pre> <p>Re-map to valid <code>x,y</code> inside <code>0..width-1</code>, <code>0..height-1</code>. Ensure you don\u2019t clear the screen after <code>getLedColors()</code>.</p>"},{"location":"troubleshooting.html#low-performance-high-cpu","title":"\ud83c\udfc3 Low performance / high CPU","text":"<p>Fix</p> <ul> <li>Map fewer LEDs, simplify drawing.</li> <li>Limit frame rate:</li> </ul> <p><pre><code>void setup() { frameRate(30); }\n</code></pre> * Throttle logs:</p> <pre><code>if (frameCount % 30 == 0) println(\"debug...\");\n</code></pre>"},{"location":"troubleshooting.html#gammabrightness-feels-off","title":"\ud83c\udf08 Gamma/brightness feels off","text":"<p>Fix</p> <pre><code>c2d.setResponse(1.2f);                 // 1.0 = linear\nc2d.setTemperature(0.15f);             // -1 warm \u2026 +1 cool\nfloat[] curve = {0.0, 0.05, 0.2, 0.5, 0.8, 1.0}; // overrides response()\nc2d.setCustomCurve(curve);\n</code></pre>"},{"location":"troubleshooting.html#verify-pipeline-without-hardware","title":"\ud83e\uddea Verify pipeline without hardware","text":"<p>Log a tiny preview periodically:</p> <pre><code>if (frameCount % 30 == 0) {\n  c2d.sendToDmx((ch, val) -&gt; { if (ch &lt;= 16) println(\"ch \" + ch + \" = \" + val); });\n}\n</code></pre>"},{"location":"troubleshooting.html#still-stuck","title":"\ud83c\udd98 Still stuck?","text":"<p>1) First, try the included examples: Basics, StripMapping, InteractiveDemo.</p> <p>2) If the problem persists, open an issue here:    \ud83d\udc49 Open an issue</p> <p>Please include: - OS &amp; version: (macOS 14.5 / Windows 11 / Ubuntu 22.04) - Processing version: (e.g., 4.3) - Canvas2DMX version: (release tag or <code>library.properties</code>) - DMX backend: (DMX4Artists version if applicable) - Controller &amp; connection: (model, serial/COM path, e.g., <code>/dev/tty.usbserial-B001N0ZB</code>) - Sketchbook path: (Processing Preferences \u2192 Sketchbook Location) - Fixture config: <code>startAt</code>, <code>setChannelPattern(...)</code>, any <code>setDefaultValue(...)</code> - LED mapping details: how many LEDs, mapping method used (strip/ring/grid) - Minimal reproducible sketch: a short sketch that triggers the issue - Console output / error messages: copy/paste the relevant lines - Steps to reproduce: numbered list (what you did, what you expected, what happened)</p> <p>Tip (no hardware): preview DMX output in console <code>java    // Log the first 16 channels about twice per second   if (frameCount % 30 == 0) {     c2d.sendToDmx((ch, val) -&gt; {       if (ch &lt;= 16) println(\"ch \" + ch + \" = \" + val);     });   }</code></p>"}]}